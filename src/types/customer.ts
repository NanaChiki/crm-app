// =============================================================================
// 📋 基本のCustomer型（Prismaスキーマと完全一致）
// =============================================================================

/**
 * Customer型 - データベースから取得される顧客データの完全な型定義
 *
 * 【設計意図】
 * - Prismaスキーマの Customer model と完全に一致
 * - データベースから取得したデータをそのまま扱える
 * - 全てのフィールドが定義されている状態を表現
 *
 * 【フィールド説明】
 * - customerId: 自動生成されるID（必須）
 * - companyName: 会社名（必須 - 50代の方でも分かりやすい重要情報）
 * - contactPerson: 担当者名（任意 - ?付き）
 * - phone, email, address: 連絡先情報（全て任意）
 * - notes: 備考（任意 - 自由記述）
 * - createdAt, updatedAt: タイムスタンプ（自動管理）
 */
export interface Customer {
  /** 顧客ID（自動生成・主キー）*/
  customerId: number;

  /** 会社名（必須項目）*/
  companyName: string;

  /** 担当者名（任意項目）
   * 【?を付ける理由】個人情報のため空の場合がある */
  contactPerson: string | null;

  /** 電話番号（任意項目）
   * 【?を付ける理由】連絡方法は複数あるため必須ではない */
  phone: string | null;

  /** メールアドレス（任意項目）
   * 【?を付ける理由】50代の方でメール未使用の場合もある */
  email: string | null;

  /** 住所（任意項目）
   * 【?を付ける理由】郵送が不要な場合は空でも良い */
  address: string | null;
  /** 備考・メモ（任意項目）
   * 【?を付ける理由】特記事項がない場合は空 */
  notes: string | null;

  /** 作成日時（自動設定） */
  createdAt: Date;

  /** 更新日時（自動更新） */
  updatedAt: Date;
}

// =============================================================================
// 📝 新規顧客作成用の型定義
// =============================================================================

/**
 * CreateCustomerInput型 - 新規顧客登録時に必要なデータの型定義
 *
 * 【設計意図】
 * - 新規作成時はID・タイムスタンプは不要（自動生成されるため）
 * - ユーザーが入力する項目のみを定義
 * - 最低限必要な情報（companyName）のみ必須
 *
 * 【Pick<T, K>を使わない理由】
 * 学習目的で明示的に定義し、各フィールドの意図を明確にする
 *
 * 【50代向け設計】
 * - 必須項目を最小限に（会社名のみ）
 * - 段階的に情報を追加できるよう全て任意項目
 */

export interface CreateCustomerInput {
  /** 会社名（新規登録時の唯一の必須項目）
   * 【必須にする理由】顧客を識別する最重要情報 */
  companyName: string;

  /** 担当者名（任意）
   * 【任意にする理由】後から追加可能、最初は会社名だけでOK */
  contactPerson?: string;

  /** 電話番号（任意）
   * 【任意にする理由】段階的な情報入力をサポート */
  phone?: string;

  /** メールアドレス（任意）
   * 【任意にする理由】50代の方には負担を減らす配慮 */
  email?: string;

  /** 住所（任意）
   * 【任意にする理由】必要に応じて後から入力 */
  address?: string;

  /** 備考・メモ（任意）
   * 【任意にする理由】特記事項は必要な時だけ */
  notes?: string;
}

// =============================================================================
// ✏️ 顧客情報更新用の型定義
// =============================================================================

/**
 * UpdateCustomerInput型 - 既存顧客情報更新時のデータ型定義
 *
 * 【設計意図】
 * - 更新時は全てのフィールドが任意（部分更新をサポート）
 * - Partial<T>を使って既存型から「全て任意」の型を生成
 * - ID・タイムスタンプは更新対象外
 *
 * 【Partial<T>を使う理由】
 * - CreateCustomerInputの全フィールドを任意にする
 * - 一部のフィールドだけ更新する場合に対応
 * - 型の重複を避けてメンテナンス性向上
 *
 * 【50代向け設計】
 * - 必要な項目だけ変更可能
 * - 誤って空にしてしまう心配がない（undefinedの項目は更新されない）
 */

export type UpdateCustomerInput = Partial<CreateCustomerInput>;

// =============================================================================
// 🔍 顧客検索・フィルタリング用の型定義
// =============================================================================

/**
 * CustomerSearchParams型 - 顧客検索時のパラメータ型定義
 *
 * 【設計意図】
 * - 検索条件を型安全に管理
 * - 50代の方でも使いやすい検索機能をサポート
 * - 全ての検索条件は任意（柔軟な検索を実現）
 */

export interface CustomerSearchParams {
  /** 会社名での検索（部分一致）
   * 【任意にする理由】全顧客表示も可能にする */
  companyName?: string;

  /** 担当者名での検索（部分一致）
   * 【任意にする理由】担当者が分からない場合もある */
  contactPerson?: string;

  /** 電話番号での検索（部分一致）
   * 【任意にする理由】電話番号からの逆引き検索用 */
  phone?: string;

  /** 作成日での絞り込み（以降）
   * 【任意にする理由】期間指定検索は高度な機能 */
  createdAfter?: Date;

  /** 作成日での絞り込み（以前）
   * 【任意にする理由】期間指定検索は高度な機能 */
  createdBefore?: Date;
}

// =============================================================================
// 📊 顧客一覧表示用の型定義
// =============================================================================

/**
 * CustomerListItem型 - 顧客一覧画面での表示用データ型定義
 *
 * 【設計意図】
 * - 一覧表示に必要な最小限の情報のみ
 * - 画面表示パフォーマンスを向上
 * - 50代の方でも見やすい情報量に調整
 *
 * 【Pick<T, K>を使う理由】
 * - Customer型から必要なフィールドのみを選択
 * - 型の一貫性を保ちながらデータ量を削減
 * - 将来Customer型が変更されても自動で追従
 */

export type CustomerListItem = Pick<
  Customer,
  "customerId" | "companyName" | "contactPerson" | "phone" | "createdAt"
>;
